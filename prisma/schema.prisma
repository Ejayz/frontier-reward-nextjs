generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model actions {
  id                      Int                       @id @default(autoincrement()) @db.UnsignedInt
  name                    String
  description             String
  created_at              DateTime?                 @db.Timestamp(0)
  updated_at              DateTime?                 @db.Timestamp(0)
  campaign_action_rewards campaign_action_rewards[]
  transaction_items       transaction_items[]
}

model campaign_action_rewards {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  campaign_id Int       @db.UnsignedInt
  action_id   Int       @db.UnsignedInt
  reward_id   Int       @db.UnsignedInt
  quantity    Int       @default(0)
  deleted_at  DateTime? @db.Timestamp(0)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  actions     actions   @relation(fields: [action_id], references: [id], onUpdate: Restrict, map: "campaign_action_rewards_action_id_foreign")
  campaigns   campaigns @relation(fields: [campaign_id], references: [id], onUpdate: Restrict, map: "campaign_action_rewards_campaign_id_foreign")
  rewards     rewards   @relation(fields: [reward_id], references: [id], onUpdate: Restrict, map: "campaign_action_rewards_reward_id_foreign")

  @@index([action_id], map: "campaign_action_rewards_action_id_foreign")
  @@index([campaign_id], map: "campaign_action_rewards_campaign_id_foreign")
  @@index([reward_id], map: "campaign_action_rewards_reward_id_foreign")
}

model campaigns {
  id                      Int                       @id @default(autoincrement()) @db.UnsignedInt
  name                    String
  description             String
  start_date              DateTime                  @db.Date
  end_date                DateTime                  @db.Date
  created_at              DateTime?                 @db.Timestamp(0)
  updated_at              DateTime?                 @db.Timestamp(0)
  deleted_at              DateTime?                 @db.Timestamp(0)
  campaign_action_rewards campaign_action_rewards[]
  transaction_items       transaction_items[]
}

model companies {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  name       String
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model exponent_push_notification_interests {
  key   String
  value String

  @@unique([key, value], map: "exponent_push_notification_interests_key_value_unique")
  @@index([key], map: "exponent_push_notification_interests_key_index")
}

model failed_jobs {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique")
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model jobs {
  id           Int    @id @default(autoincrement()) @db.UnsignedInt
  queue        String
  payload      String @db.LongText
  attempts     Int    @db.UnsignedTinyInt
  reserved_at  Int?   @db.UnsignedInt
  available_at Int    @db.UnsignedInt
  created_at   Int    @db.UnsignedInt

  @@index([queue], map: "jobs_queue_index")
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String
  batch     Int
}

model notifications {
  id              String    @id @db.Char(36)
  type            String
  notifiable_type String
  notifiable_id   Int       @db.UnsignedInt
  data            String    @db.Text
  read_at         DateTime? @db.Timestamp(0)
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)

  @@index([notifiable_type, notifiable_id], map: "notifications_notifiable_type_notifiable_id_index")
}

model oauth_access_tokens {
  id         String    @id @db.VarChar(100)
  user_id    Int?      @db.UnsignedInt
  client_id  Int       @db.UnsignedInt
  name       String?
  scopes     String?   @db.Text
  revoked    Boolean
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  expires_at DateTime? @db.DateTime(0)

  @@index([user_id], map: "oauth_access_tokens_user_id_index")
}

model oauth_auth_codes {
  id         String    @id @db.VarChar(100)
  user_id    Int       @db.UnsignedInt
  client_id  Int       @db.UnsignedInt
  scopes     String?   @db.Text
  revoked    Boolean
  expires_at DateTime? @db.DateTime(0)

  @@index([user_id], map: "oauth_auth_codes_user_id_index")
}

model oauth_clients {
  id                     Int       @id @default(autoincrement()) @db.UnsignedInt
  user_id                Int?      @db.UnsignedInt
  name                   String
  secret                 String?   @db.VarChar(100)
  provider               String?
  redirect               String    @db.Text
  personal_access_client Boolean
  password_client        Boolean
  revoked                Boolean
  created_at             DateTime? @db.Timestamp(0)
  updated_at             DateTime? @db.Timestamp(0)

  @@index([user_id], map: "oauth_clients_user_id_index")
}

model oauth_personal_access_clients {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  client_id  Int       @db.UnsignedInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model oauth_refresh_tokens {
  id              String    @id @db.VarChar(100)
  access_token_id String    @db.VarChar(100)
  revoked         Boolean
  expires_at      DateTime? @db.DateTime(0)

  @@index([access_token_id], map: "oauth_refresh_tokens_access_token_id_index")
}

model package_rewards {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  package_id Int       @db.UnsignedInt
  reward_id  Int       @db.UnsignedInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  packages   packages  @relation(fields: [package_id], references: [id], onUpdate: Restrict, map: "package_rewards_package_id_foreign")
  rewards    rewards   @relation(fields: [reward_id], references: [id], onUpdate: Restrict, map: "package_rewards_reward_id_foreign")

  @@index([package_id], map: "package_rewards_package_id_foreign")
  @@index([reward_id], map: "package_rewards_reward_id_foreign")
}

model packages {
  id              Int               @id @default(autoincrement()) @db.UnsignedInt
  name            String
  description     String
  multiplier      Decimal           @default(0.00) @db.Decimal(8, 2)
  created_at      DateTime?         @db.Timestamp(0)
  updated_at      DateTime?         @db.Timestamp(0)
  is_exist        Boolean           @default(true)
  package_rewards package_rewards[]
  user_infos      user_infos[]
}

model products {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  name       String
  detail     String    @db.Text
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model rewards {
  id                      Int                       @id @default(autoincrement()) @db.UnsignedInt
  name                    String
  description             String
  type                    rewards_type
  value                   Decimal                   @default(0.00) @db.Decimal(8, 2)
  cost                    Decimal                   @default(0.00) @db.Decimal(8, 2)
  created_at              DateTime?                 @db.Timestamp(0)
  updated_at              DateTime?                 @db.Timestamp(0)
  campaign_action_rewards campaign_action_rewards[]
  package_rewards         package_rewards[]
  user_rewards            user_rewards[]
}

model transaction_items {
  id                                                               Int            @id @default(autoincrement()) @db.UnsignedInt
  campaign_id                                                      Int?           @db.UnsignedInt
  campaign_name                                                    String?
  action_id                                                        Int?           @db.UnsignedInt
  action_name                                                      String?
  reward_id                                                        Int?           @db.UnsignedInt
  total                                                            Decimal        @default(0.00) @db.Decimal(8, 2)
  created_at                                                       DateTime?      @db.Timestamp(0)
  updated_at                                                       DateTime?      @db.Timestamp(0)
  actions                                                          actions?       @relation(fields: [action_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "transaction_items_action_id_foreign")
  campaigns                                                        campaigns?     @relation(fields: [campaign_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "transaction_items_campaign_id_foreign")
  user_rewards_transaction_items_reward_idTouser_rewards           user_rewards?  @relation("transaction_items_reward_idTouser_rewards", fields: [reward_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "transaction_items_reward_id_foreign")
  transactions                                                     transactions[]
  user_rewards_user_rewards_transaction_item_idTotransaction_items user_rewards[] @relation("user_rewards_transaction_item_idTotransaction_items")

  @@index([action_id], map: "transaction_items_action_id_foreign")
  @@index([campaign_id], map: "transaction_items_campaign_id_foreign")
  @@index([reward_id], map: "transaction_items_reward_id_foreign")
}

model transactions {
  id                                          Int                 @id @default(autoincrement()) @db.UnsignedInt
  type                                        transactions_type   @default(earn)
  transaction_id                              String              @unique(map: "transactions_transaction_id_unique")
  transaction_item_id                         Int                 @db.UnsignedInt
  reference_no                                String?
  balance                                     Decimal             @db.Decimal(8, 2)
  cost                                        Decimal             @db.Decimal(8, 2)
  user_id                                     Int                 @db.UnsignedInt
  salesperson_id                              Int?                @db.UnsignedInt
  status                                      transactions_status @default(pending)
  status_updated_by                           Int?                @db.UnsignedInt
  created_at                                  DateTime?           @db.Timestamp(0)
  updated_at                                  DateTime?           @db.Timestamp(0)
  users_transactions_salesperson_idTousers    users?              @relation("transactions_salesperson_idTousers", fields: [salesperson_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "transactions_salesperson_id_foreign")
  users_transactions_status_updated_byTousers users?              @relation("transactions_status_updated_byTousers", fields: [status_updated_by], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "transactions_status_updated_by_foreign")
  transaction_items                           transaction_items   @relation(fields: [transaction_item_id], references: [id], onUpdate: Restrict, map: "transactions_transaction_item_id_foreign")
  users_transactions_user_idTousers           users               @relation("transactions_user_idTousers", fields: [user_id], references: [id], onUpdate: Restrict, map: "transactions_user_id_foreign")

  @@index([salesperson_id], map: "transactions_salesperson_id_foreign")
  @@index([status_updated_by], map: "transactions_status_updated_by_foreign")
  @@index([transaction_item_id], map: "transactions_transaction_item_id_foreign")
  @@index([user_id], map: "transactions_user_id_foreign")
}

model user_infos {
  id                                     Int       @id @default(autoincrement()) @db.UnsignedInt
  user_id                                Int       @db.UnsignedInt
  package_id                             Int       @db.UnsignedInt
  customer_id                            String    @unique(map: "user_infos_customer_id_unique")
  customer_infos                         String    @db.LongText
  salesperson_id                         Int       @db.UnsignedInt
  created_at                             DateTime? @db.Timestamp(0)
  updated_at                             DateTime? @db.Timestamp(0)
  deleted_at                             DateTime? @db.Timestamp(0)
  packages                               packages  @relation(fields: [package_id], references: [id], onUpdate: Restrict, map: "user_infos_package_id_foreign")
  users_user_infos_salesperson_idTousers users     @relation("user_infos_salesperson_idTousers", fields: [salesperson_id], references: [id], onUpdate: Restrict, map: "user_infos_salesperson_id_foreign")
  users_user_infos_user_idTousers        users     @relation("user_infos_user_idTousers", fields: [user_id], references: [id], onUpdate: Restrict, map: "user_infos_user_id_foreign")

  @@index([package_id], map: "user_infos_package_id_foreign")
  @@index([salesperson_id], map: "user_infos_salesperson_id_foreign")
  @@index([user_id], map: "user_infos_user_id_foreign")
}

model user_rewards {
  id                                                                    Int                 @id @default(autoincrement()) @db.UnsignedInt
  user_id                                                               Int                 @db.UnsignedInt
  transaction_item_id                                                   Int                 @db.UnsignedInt
  reward_id                                                             Int?                @db.UnsignedInt
  reward_name                                                           String
  reward_type                                                           String
  multiplier                                                            Decimal             @default(0.00) @db.Decimal(8, 2)
  reward_qty                                                            Decimal             @db.Decimal(8, 2)
  claimed_qty                                                           Decimal             @db.Decimal(8, 2)
  status                                                                user_rewards_status
  created_at                                                            DateTime?           @db.Timestamp(0)
  updated_at                                                            DateTime?           @db.Timestamp(0)
  o_reward_quantity                                                     Decimal             @default(0.00) @db.Decimal(8, 2)
  transaction_items_transaction_items_reward_idTouser_rewards           transaction_items[] @relation("transaction_items_reward_idTouser_rewards")
  rewards                                                               rewards?            @relation(fields: [reward_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "user_rewards_reward_id_foreign")
  transaction_items_user_rewards_transaction_item_idTotransaction_items transaction_items   @relation("user_rewards_transaction_item_idTotransaction_items", fields: [transaction_item_id], references: [id], onUpdate: Restrict, map: "user_rewards_transaction_item_id_foreign")
  users                                                                 users               @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "user_rewards_user_id_foreign")

  @@index([reward_id], map: "user_rewards_reward_id_foreign")
  @@index([transaction_item_id], map: "user_rewards_transaction_item_id_foreign")
  @@index([user_id], map: "user_rewards_user_id_foreign")
}

model user_types {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  code       Int
  name       String
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  users      users[]
}

model user_vehicles {
  id           Int       @id @default(autoincrement()) @db.UnsignedInt
  user_id      Int       @db.UnsignedInt
  vehicle_id   String    @unique(map: "user_vehicles_vehicle_id_unique")
  vehicle_info String    @db.LongText
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
  users        users     @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "user_vehicles_user_id_foreign")

  @@index([user_id], map: "user_vehicles_user_id_foreign")
}

model users {
  id                                                 Int             @id @default(autoincrement()) @db.UnsignedInt
  name                                               String
  firstname                                          String
  middlename                                         String?
  lastname                                           String
  phone_number                                       String?
  email                                              String          @unique(map: "users_email_unique")
  email_verified_at                                  DateTime?       @db.Timestamp(0)
  password                                           String
  remember_token                                     String?         @db.VarChar(100)
  user_type_id                                       Int?            @db.UnsignedInt
  points                                             Decimal         @default(0.00) @db.Decimal(8, 2)
  iso2                                               String?         @db.VarChar(15)
  dial_code                                          String?         @db.VarChar(15)
  created_at                                         DateTime?       @db.Timestamp(0)
  updated_at                                         DateTime?       @db.Timestamp(0)
  deleted_at                                         DateTime?       @db.Timestamp(0)
  is_exsit                                           Boolean         @default(false)
  transactions_transactions_salesperson_idTousers    transactions[]  @relation("transactions_salesperson_idTousers")
  transactions_transactions_status_updated_byTousers transactions[]  @relation("transactions_status_updated_byTousers")
  transactions_transactions_user_idTousers           transactions[]  @relation("transactions_user_idTousers")
  user_infos_user_infos_salesperson_idTousers        user_infos[]    @relation("user_infos_salesperson_idTousers")
  user_infos_user_infos_user_idTousers               user_infos[]    @relation("user_infos_user_idTousers")
  user_rewards                                       user_rewards[]
  user_vehicles                                      user_vehicles[]
  user_types                                         user_types?     @relation(fields: [user_type_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "users_user_type_id_foreign")

  @@index([name], map: "full")
  @@index([user_type_id], map: "users_user_type_id_foreign")
}

model websockets_statistics_entries {
  id                      Int       @id @default(autoincrement()) @db.UnsignedInt
  app_id                  String
  peak_connection_count   Int
  websocket_message_count Int
  api_message_count       Int
  created_at              DateTime? @db.Timestamp(0)
  updated_at              DateTime? @db.Timestamp(0)
}

enum transactions_type {
  earn
  claim
}

enum rewards_type {
  item
  discount
  points
}

enum transactions_status {
  pending
  cancelled
  completed
  confirmed
}

enum user_rewards_status {
  incomplete
  completed
}
